




  
	
	  

  
	
	  

  
	
	  

  
	
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
		
		
		
	  

  
	
	  

  
	
	  

  
	
	  

  
	
	  

  
	
		
		
		
	  

  
	
	  

  
	
	  

  
	
		
		
		
	  

  
	
		
	  

  
	
	  

  
	
	  

  
	
		
		
		
	  

  
	
	  

  
	
	  

  
	
		
		
		
	  

  
	
	  

  
	
	  

  
	
		
		
		
		
		
	  

  
	
	  

  
	
	  

  
	
	  

  
	
	  

  
	
		
		
		
	  

  
	
	  

  
	
	  

  
	
		
		
		
	  

  
	
	  

  
	
	  

  
	
		
		
		
	  

  
	
	  

  
	
	  

  
	
	  

  
	
		
		
	  

  
	
	  

  
	
		
		
	  

  
	
	  

  
	
		
		
		
		
	  

  
	
		
		
	  

  
	
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
		
	  

  
	
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
		
	  

  
	
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
		
		
	  

  
	
	  

  
	
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
		
	  

  
	
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
		
	  

  
	
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
		
	  

  
	
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
		
		
	  

  
	
	  

  
	
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
		
		
	  

  
	
	  

  
	
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
		
	  

  
	
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
		
		
	  

  
	
	  

  
	
	  

  
	
		
	  

  
	
		
		
		
<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Strings and StringBuilders :: CC 315 Textbook</title>
    <link>https://textbooks.cs.ksu.edu/cc315/i-strings/1-strings-and-stringbuilders/</link>
    <description>Welcome! This page is the main page for the Strings and StringBuilders chapter</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 27 Jun 2024 16:12:13 -0500</lastBuildDate>
    <atom:link href="https://textbooks.cs.ksu.edu/cc315/i-strings/1-strings-and-stringbuilders/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Introduction</title>
      <link>https://textbooks.cs.ksu.edu/cc315/i-strings/1-strings-and-stringbuilders/01-introduction/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://textbooks.cs.ksu.edu/cc315/i-strings/1-strings-and-stringbuilders/01-introduction/</guid>
      <description>Video Materials&#xA;In CC310 we covered various data structures: stacks, sets, lists, queues, and hash tables. When we looked at these structures, we considered how to access elements within the structures, how we would create our own implementation of the structure, and tasks that these structures would be fitting for as well as ill fitting. Throughout this course we will introduce and implement a variety of data structures as we did in CC310.</description>
    </item>
    <item>
      <title>Theory</title>
      <link>https://textbooks.cs.ksu.edu/cc315/i-strings/1-strings-and-stringbuilders/02-theory/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://textbooks.cs.ksu.edu/cc315/i-strings/1-strings-and-stringbuilders/02-theory/</guid>
      <description>Video Materials&#xA;What are Strings? Strings are data structures which store an ordered set of characters. Recall that a character can be a: letter, number, symbol, punctuation mark, or white space. Strings can contain any number and any combination of these. As such, strings can be single characters, words, sentences, and even more.&#xA;How do we work with Strings? Letâ€™s refresh ourselves on how strings work, starting with the example string: s = &#34;Go Cats!</description>
    </item>
    <item>
      <title>Memory Example</title>
      <link>https://textbooks.cs.ksu.edu/cc315/i-strings/1-strings-and-stringbuilders/03-memory-example/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://textbooks.cs.ksu.edu/cc315/i-strings/1-strings-and-stringbuilders/03-memory-example/</guid>
      <description>Consider the following block of pseudocode:&#xA;1. function APPENDER(NUMBER, BASE) 2. RESULT = &#34;&#34; 3. loop I from 1 to NUMBER 4. RESULT = RESULT + BASE 5. if I MOD 2 = 0 6. RESULT = RESULT + &#34; &#34; 7. else 8. RESULT = RESULT + &#34;, &#34; 9. end loop 10. return RESULT 11. end functionLets step through the function call with APPENDER(4,&#39;abc&#39;) and analyze the memory that the code takes.</description>
    </item>
    <item>
      <title>Limitations Java</title>
      <link>https://textbooks.cs.ksu.edu/cc315/i-strings/1-strings-and-stringbuilders/04-j-memory-example/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://textbooks.cs.ksu.edu/cc315/i-strings/1-strings-and-stringbuilders/04-j-memory-example/</guid>
      <description>Video Materials&#xA;As a result of being immutable, strings can be cumbersome to work with in certain applications. When long strings or strings that we are continually appending to, such as in the memory example, we end up creating a lot of sizable copies.&#xA;Recall from the memory example the block of pseudocode.&#xA;1. function APPENDER(NUMBER, BASE) 2. RESULT = &#34;&#34; 3. loop I from 1 to NUMBER 4. RESULT = RESULT + BASE 5.</description>
    </item>
    <item>
      <title>Limitations Python</title>
      <link>https://textbooks.cs.ksu.edu/cc315/i-strings/1-strings-and-stringbuilders/04-p-memory-example/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://textbooks.cs.ksu.edu/cc315/i-strings/1-strings-and-stringbuilders/04-p-memory-example/</guid>
      <description>Video Materials&#xA;As a result of being immutable, strings can be cumbersome to work with in certain applications. When working with long strings or strings that we are continually appending to, such as in the memory example, we end up creating a lot of sizable copies.&#xA;Recall from the memory example the block of pseudocode.&#xA;1. function APPENDER(NUMBER, BASE) 2. RESULT = &#34;&#34; 3. loop I from 1 to NUMBER 4.</description>
    </item>
    <item>
      <title>Summary</title>
      <link>https://textbooks.cs.ksu.edu/cc315/i-strings/1-strings-and-stringbuilders/05-summary/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://textbooks.cs.ksu.edu/cc315/i-strings/1-strings-and-stringbuilders/05-summary/</guid>
      <description>Video Materials&#xA;To start this course, we have looked into strings. They are a very natural way to represent data, especially in real world applications. Often though, the datapoints can be very large and require multiple modifications. We also examined how strings work: element access, retrieving the size, and modifying them. We looked into some alternatives which included StringBuilders for Java and character arrays for Python.&#xA;To really understand this point, we have included a comparison.</description>
    </item>
  </channel>
</rss>