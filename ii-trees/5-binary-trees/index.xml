




  
	
	  

  
	
	  

  
	
	  

  
	
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
		
		
		
	  

  
	
	  

  
	
	  

  
	
	  

  
	
	  

  
	
		
		
		
	  

  
	
	  

  
	
	  

  
	
		
		
		
	  

  
	
		
	  

  
	
	  

  
	
	  

  
	
		
		
		
	  

  
	
	  

  
	
	  

  
	
		
		
		
	  

  
	
	  

  
	
	  

  
	
		
		
		
		
		
	  

  
	
	  

  
	
	  

  
	
	  

  
	
	  

  
	
		
		
		
	  

  
	
	  

  
	
	  

  
	
		
		
		
	  

  
	
	  

  
	
	  

  
	
		
		
		
	  

  
	
	  

  
	
	  

  
	
	  

  
	
		
		
	  

  
	
	  

  
	
		
		
	  

  
	
	  

  
	
		
		
		
		
	  

  
	
		
		
	  

  
	
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
		
	  

  
	
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
		
	  

  
	
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
		
		
	  

  
	
	  

  
	
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
		
	  

  
	
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
		
	  

  
	
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
		
	  

  
	
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
		
		
	  

  
	
	  

  
	
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
		
		
	  

  
	
	  

  
	
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
		
	  

  
	
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
		
		
	  

  
	
	  

  
	
	  

  
	
		
	  

  
	
		
		
		
<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Binary Trees :: CC 315 Textbook</title>
    <link>https://textbooks.cs.ksu.edu/cc315/ii-trees/5-binary-trees/</link>
    <description>Welcome! This page is the main page for Binary Trees</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 27 Jun 2024 16:12:13 -0500</lastBuildDate>
    <atom:link href="https://textbooks.cs.ksu.edu/cc315/ii-trees/5-binary-trees/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Binary Tree</title>
      <link>https://textbooks.cs.ksu.edu/cc315/ii-trees/5-binary-trees/1-binary-tree/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://textbooks.cs.ksu.edu/cc315/ii-trees/5-binary-trees/1-binary-tree/</guid>
      <description>A binary tree is a type of tree with some special conditions. First, it must follow the guidelines of being a tree:&#xA;There must be single root, each child node must have a single parent node, it must be fully connected (no disjoint parts), and there can be no cycles (no loops). The special conditions that we impose on binary trees are the following:&#xA;Each node has at most 2 children (nodes can have 0, 1, or 2 children), and unlike general trees, the children in a binary tree are not an unordered set.</description>
    </item>
    <item>
      <title>Binary Tree Examples</title>
      <link>https://textbooks.cs.ksu.edu/cc315/ii-trees/5-binary-trees/2-binary-tree-examples/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://textbooks.cs.ksu.edu/cc315/ii-trees/5-binary-trees/2-binary-tree-examples/</guid>
      <description>Valid Binary Trees This is a valid binary tree. We have a single node, the root, with no children. As with general trees, binary trees are built recursively. Thus, each node and its child(ren) are trees themselves.&#xA;This is also a valid binary tree. All of the left children are less than their parent. The node with item ‘10’ is also in the correct position as it is less than 12, 13, and 14 but greater than 9.</description>
    </item>
    <item>
      <title>Traversals</title>
      <link>https://textbooks.cs.ksu.edu/cc315/ii-trees/5-binary-trees/3-traversals/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://textbooks.cs.ksu.edu/cc315/ii-trees/5-binary-trees/3-traversals/</guid>
      <description>In the first module we discussed two types of traversals: preorder and postorder. Within that discussion, we noted that for general trees, the preorder and postorder traversal may not be unique. This was due to the fact that children nodes are an unordered set.&#xA;Info We are now working with binary trees which have a defined child order. As a result, the preorder and postorder traversals will be unique! These means that for a binary tree when we do a preorder traversal there is exactly one string that is possible.</description>
    </item>
    <item>
      <title>In-Order Traversal</title>
      <link>https://textbooks.cs.ksu.edu/cc315/ii-trees/5-binary-trees/4-in-order-traversal/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://textbooks.cs.ksu.edu/cc315/ii-trees/5-binary-trees/4-in-order-traversal/</guid>
      <description> Since we have fixed order on the children, we can introduce another type of traversal: in-order traversal.&#xA;In-order Traversal:&#xA;Run the in-order traversal on the left child Access the root, write its value Run the in-order traversal on the right child Remember: Left Root Right </description>
    </item>
    <item>
      <title>MyBinaryTree</title>
      <link>https://textbooks.cs.ksu.edu/cc315/ii-trees/5-binary-trees/5-mybinarytree/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://textbooks.cs.ksu.edu/cc315/ii-trees/5-binary-trees/5-mybinarytree/</guid>
      <description>Our implementation of binary trees will inherit from our MyTree implementation as binary trees are types of trees. Thus, MyBinaryTree will have the functionality of MyTree in addition to the following.&#xA;Attributes The binary tree has two attributes&#xA;Left Child: an instance of MyBinaryTree, the item should be less than the item of the parent. Right Child: an instance of MyBinaryTree, the item should be greater than the item of the parent.</description>
    </item>
    <item>
      <title>Inserting Children</title>
      <link>https://textbooks.cs.ksu.edu/cc315/ii-trees/5-binary-trees/6-inserting-children/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://textbooks.cs.ksu.edu/cc315/ii-trees/5-binary-trees/6-inserting-children/</guid>
      <description>When inserting children to a binary tree, we must take some special considerations. All of the node items in the left tree must be less than the parent node item and all of the node items in the right tree must be greater than the parent node item.&#xA;The general procedure for adding a child is the following: Suppose that we have the following tree and we want to add a node with item ‘85’.</description>
    </item>
    <item>
      <title>Removing Children</title>
      <link>https://textbooks.cs.ksu.edu/cc315/ii-trees/5-binary-trees/7-removing-children/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://textbooks.cs.ksu.edu/cc315/ii-trees/5-binary-trees/7-removing-children/</guid>
      <description>Removing children is not as straightforward as inserting them. The general procedure for removing a child is to replace that nodes value with its smallest right descendant. First we will traverse the binary tree until we find the node with the value we are trying to remove (lines 18-32 below). Then we have three separate cases, discussed in detail below.&#xA;Removing a Leaf Removing a leaf is the most straightforward.</description>
    </item>
    <item>
      <title>Balance</title>
      <link>https://textbooks.cs.ksu.edu/cc315/ii-trees/5-binary-trees/8-balance/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://textbooks.cs.ksu.edu/cc315/ii-trees/5-binary-trees/8-balance/</guid>
      <description>While this is a valid binary tree, it is not balanced. Let’s look at the following tree.&#xA;We have the same nodes but our root is now 12 whereas before it was 14. This is a valid binary tree. We call this a balanced binary tree. A balanced binary tree looks visually even amongst the left and right trees in terms of number of nodes.&#xA;Note: Balancing is not necessary for a valid binary tree.</description>
    </item>
  </channel>
</rss>