




  
	
	  

  
	
	  

  
	
	  

  
	
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
		
		
		
	  

  
	
	  

  
	
	  

  
	
	  

  
	
	  

  
	
		
		
		
	  

  
	
	  

  
	
	  

  
	
		
		
		
	  

  
	
		
	  

  
	
	  

  
	
	  

  
	
		
		
		
	  

  
	
	  

  
	
	  

  
	
		
		
		
	  

  
	
	  

  
	
	  

  
	
		
		
		
		
		
	  

  
	
	  

  
	
	  

  
	
	  

  
	
	  

  
	
		
		
		
	  

  
	
	  

  
	
	  

  
	
		
		
		
	  

  
	
	  

  
	
	  

  
	
		
		
		
	  

  
	
	  

  
	
	  

  
	
	  

  
	
		
		
	  

  
	
	  

  
	
		
		
	  

  
	
	  

  
	
		
		
		
		
	  

  
	
		
		
	  

  
	
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
		
	  

  
	
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
		
	  

  
	
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
		
		
	  

  
	
	  

  
	
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
		
	  

  
	
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
		
	  

  
	
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
		
	  

  
	
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
		
		
	  

  
	
	  

  
	
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
		
		
	  

  
	
	  

  
	
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
		
	  

  
	
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
		
		
	  

  
	
	  

  
	
	  

  
	
		
	  

  
	
		
		
		
<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tree Traversal :: CC 315 Textbook</title>
    <link>https://textbooks.cs.ksu.edu/cc315/ii-trees/3-tree-traversal/</link>
    <description>Welcome! This page is the main page for Tree Traversal</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 27 Jun 2024 16:12:13 -0500</lastBuildDate>
    <atom:link href="https://textbooks.cs.ksu.edu/cc315/ii-trees/3-tree-traversal/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Introduction</title>
      <link>https://textbooks.cs.ksu.edu/cc315/ii-trees/3-tree-traversal/1-introduction/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://textbooks.cs.ksu.edu/cc315/ii-trees/3-tree-traversal/1-introduction/</guid>
      <description>In the last module, we covered the underlying vocabulary of trees and how we can implement our own tree. To recall, we covered: node, edge, root, leaf, parent, child, and degree.&#xA;For this module we will expand on trees and gain a better understanding of how powerful trees can be. As before, we will use the same tree throughout the module for a guiding visual example.</description>
    </item>
    <item>
      <title>Terms I</title>
      <link>https://textbooks.cs.ksu.edu/cc315/ii-trees/3-tree-traversal/2-terms-i/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://textbooks.cs.ksu.edu/cc315/ii-trees/3-tree-traversal/2-terms-i/</guid>
      <description>Many of the terms used in trees relate to terms used in family trees. Having this in mind can help us to better understand some of the terminology involved with abstract trees. Here we have a sample family tree. Ancestor - The ancestors of a node are those reached from child to parent relationships. We can think of this as our parents and our parent’s parents, and so on. Let’s look at all of the ancestors of each of our nodes in the family tree.</description>
    </item>
    <item>
      <title>Recursion Refresh</title>
      <link>https://textbooks.cs.ksu.edu/cc315/ii-trees/3-tree-traversal/3-recursion-refresh/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://textbooks.cs.ksu.edu/cc315/ii-trees/3-tree-traversal/3-recursion-refresh/</guid>
      <description>Info A recursive program is broken into two parts:&#xA;A base case—a simple version of the problem that can be solved directly, and A recursive case—a general solution to the problem that uses smaller versions of the problem to compute the solution to the larger problem. In principle, the recursive case breaks the problem down into smaller portions until we reach the base case. Recursion presents itself in many ways when dealing with trees.</description>
    </item>
    <item>
      <title>Terms II</title>
      <link>https://textbooks.cs.ksu.edu/cc315/ii-trees/3-tree-traversal/4-terms-ii/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://textbooks.cs.ksu.edu/cc315/ii-trees/3-tree-traversal/4-terms-ii/</guid>
      <description>We can describe the sizes of trees and position of nodes using different terminology, like level, depth, and height.&#xA;Level - The level of a node characterizes the distance between the node and the root. The root of the tree is considered level 1. As you move away from the tree, the level increases by one. For our family tree example, what nodes are in the following levels? Think about the answer and then click corresponding arrow.</description>
    </item>
    <item>
      <title>Terms III</title>
      <link>https://textbooks.cs.ksu.edu/cc315/ii-trees/3-tree-traversal/5-terms-iii/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://textbooks.cs.ksu.edu/cc315/ii-trees/3-tree-traversal/5-terms-iii/</guid>
      <description>When working with multidimensional data structures, we also need to consider how they would be stored in a linear manner. Remember, pieces of data in computers are linear sequences of binary digits. As a result, we need a standard way of storing trees as a linear structure.&#xA;Path - a path is a sequence of nodes and edges, which connect a node with its descendant. We can look at some paths in the tree above:</description>
    </item>
    <item>
      <title>MyTree Recursive I</title>
      <link>https://textbooks.cs.ksu.edu/cc315/ii-trees/3-tree-traversal/6-mytree-recursive-i/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://textbooks.cs.ksu.edu/cc315/ii-trees/3-tree-traversal/6-mytree-recursive-i/</guid>
      <description>Again, we want to be able to implement a working version of a tree. From the last module, we had functions to add children, remove children, get attributes, and instantiate MyTree. We will now build upon that implementation to create a true tree.&#xA;Info A recursive program is broken into two parts:&#xA;A base case—a simple version of the problem that can be solved directly, and A recursive case—a general solution to the problem that uses smaller versions of the problem to compute the solution to the larger problem.</description>
    </item>
    <item>
      <title>MyTree Recursive II</title>
      <link>https://textbooks.cs.ksu.edu/cc315/ii-trees/3-tree-traversal/7-mytree-recursive-ii/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://textbooks.cs.ksu.edu/cc315/ii-trees/3-tree-traversal/7-mytree-recursive-ii/</guid>
      <description>Determine relationships (Ancestor, Descendant, Sibling) We can determine many relationships within the tree. For example, given a node is it an ancestor of another node, a descendant, or a sibling?&#xA;Is Ancestor? For this function, we are asking: is this node an ancestor of the current instance? In this implementation, we will start at our instance and work down through the tree trying to find the node in question. With that in mind, we can define this process recursively:</description>
    </item>
    <item>
      <title>MyTree Recursive III</title>
      <link>https://textbooks.cs.ksu.edu/cc315/ii-trees/3-tree-traversal/8-mytree-recursive-iii/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://textbooks.cs.ksu.edu/cc315/ii-trees/3-tree-traversal/8-mytree-recursive-iii/</guid>
      <description>Traversals In this module we have talked about two traversals: preorder and postorder. Both of these are defined recursively and the prefix refers to the order of the root.&#xA;Preorder In a preorder traversal, first we access the root and then run the preorder traversal on the children.&#xA;function PREORDER(RESULT) append ITEM to RESULT FOR CHILD in CHILDREN CHILD.PREORDER(RESULT) end functionPostorder In a postorder traversal, first we run the postorder traversal on the children then we access the root.</description>
    </item>
    <item>
      <title>Summary</title>
      <link>https://textbooks.cs.ksu.edu/cc315/ii-trees/3-tree-traversal/9-summary/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://textbooks.cs.ksu.edu/cc315/ii-trees/3-tree-traversal/9-summary/</guid>
      <description>In this section, we discussed more terminology related to trees as well as tree traversals. To recap the new vocabulary:&#xA;Ancestor - The ancestors of a node are those reached from child to parent relationships. We can think of this as our parents and the parents of our parents, and so on. Depth - The depth of a node is its distance to the root. Thus, the root has depth zero.</description>
    </item>
  </channel>
</rss>