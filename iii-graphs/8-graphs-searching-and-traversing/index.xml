




	
	
		

	
	
		

	
	
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		
		
		
		

	
	
		

	
	
		

	
	
		

	
	
		

	
	
		
		
		
		

	
	
		

	
	
		

	
	
		
		
		
		

	
	
		

	
	
		

	
	
		
		
		
		

	
	
		

	
	
		

	
	
		
		
		
		

	
	
		

	
	
		

	
	
		
		
		
		

	
	
		
		
		
		

	
	
		

	
	
		

	
	
		

	
	
		

	
	
		
		
		
		

	
	
		

	
	
		

	
	
		
		
		
		

	
	
		

	
	
		

	
	
		
		
		
		

	
	
		

	
	
		

	
	
		

	
	
		
		
		

	
	
		

	
	
		
		
		

	
	
		

	
	
		
		
		
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		
		

	
	
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		
		

	
	
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		
		

	
	
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		
		

	
	
		

	
	
		

	
	
		
		

	
	
		
		
		
<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Graphs: Searching and Traversing on CC 315 Textbook</title>
    <link>https://ksu-cs-textbooks.github.io/cc315/iii-graphs/8-graphs-searching-and-traversing/</link>
    <description>Recent content in Graphs: Searching and Traversing on CC 315 Textbook</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 17 Aug 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://ksu-cs-textbooks.github.io/cc315/iii-graphs/8-graphs-searching-and-traversing/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Introduction</title>
      <link>https://ksu-cs-textbooks.github.io/cc315/iii-graphs/8-graphs-searching-and-traversing/1-introduction/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cc315/iii-graphs/8-graphs-searching-and-traversing/1-introduction/</guid>
      <description>In the previous modules, we have introduced graphs and two implementations. This module will cover the traversals through graphs as well as path search techniques.
Motivation As we have discussed previously, graphs can have many applications. Based on that, there are many things that we may want to infer from graphs. For example, if we have a graph that depicts a railroad or electrical network, we could determine what maximum flow of the network.</description>
    </item>
    <item>
      <title>Depth First</title>
      <link>https://ksu-cs-textbooks.github.io/cc315/iii-graphs/8-graphs-searching-and-traversing/2-depth-first/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cc315/iii-graphs/8-graphs-searching-and-traversing/2-depth-first/</guid>
      <description>Video Slides
First we will discuss Depth First Traversal. We can define the depth first traversal in two ways, iteratively or recursively. For this course, we will define it iteratively.
In the iterative algorithm, we will initialize an empty stack and an empty set. The stack will determine which node we search next and the set will track which nodes we have already searched.
Info Recall that a stack is a &amp;lsquo;Last In First Out&amp;rsquo; (LIFO) structure.</description>
    </item>
    <item>
      <title>Breadth First</title>
      <link>https://ksu-cs-textbooks.github.io/cc315/iii-graphs/8-graphs-searching-and-traversing/3-breadth-first/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cc315/iii-graphs/8-graphs-searching-and-traversing/3-breadth-first/</guid>
      <description>Video Slides
We can also perform a breadth first traversal either iteratively or recursively. As with the depth first traversal, we will define it iteratively.
In the iterative algorithm, we initialize an empty queue and an empty set. Like depth first traversal, the set will track which nodes we have discovered. We now use a queue to track which node we will search next.
Info Recall that a queue is a &amp;lsquo;First In First Out&amp;rsquo; (FIFO) structure.</description>
    </item>
    <item>
      <title>Limitations</title>
      <link>https://ksu-cs-textbooks.github.io/cc315/iii-graphs/8-graphs-searching-and-traversing/4-limitations/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cc315/iii-graphs/8-graphs-searching-and-traversing/4-limitations/</guid>
      <description>When introducing graphs, we discussed how the components of a graph didn&amp;rsquo;t have to all be connected. If our goal is to visit each node, like in the searches, then we will need to perform the search from every node.
For example, the graph below has two separate components. Lets walk through which nodes we will discover by calling the traversals from each node.
Start Visited (in alphabetical order) A {A, D, H} B {B, E, H, I} C {C} D {D} E {E, H, I} F {C, F} G {C, G} H {H} I {I} J {C, F, G, J} In this example, we would need to call either traversal on nodes A, B and J in order to visit all of the nodes.</description>
    </item>
    <item>
      <title>Finding a Path</title>
      <link>https://ksu-cs-textbooks.github.io/cc315/iii-graphs/8-graphs-searching-and-traversing/5-finding-a-path/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cc315/iii-graphs/8-graphs-searching-and-traversing/5-finding-a-path/</guid>
      <description>An important application for these traversals is the ability to find a path between two nodes. This has many applications in railroad networks as well as electrical wiring. With some modifications to the traversals, we can determine if electricity can flow from a source to a target. We will modify depth first and breadth first traversals in similar ways.
Info There are three cases that can happen when we search for a path between nodes:</description>
    </item>
    <item>
      <title>In Practice</title>
      <link>https://ksu-cs-textbooks.github.io/cc315/iii-graphs/8-graphs-searching-and-traversing/6-in-practice/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cc315/iii-graphs/8-graphs-searching-and-traversing/6-in-practice/</guid>
      <description>Traveling Finding a path in a graph is a very common application in many fields. One application that we benefit from in our day to day lives is traveling. Programs like Google Maps calculate various paths from point A to point B.
^[google.com/maps]
In the context of graph data structures, we can think of each intersection as a node and each road as an edge. Google Maps, however, tracks more features of edges than we have discussed.</description>
    </item>
  </channel>
</rss>