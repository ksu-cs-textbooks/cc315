




	
	
		

	
	
		

	
	
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		
		
		
		

	
	
		

	
	
		

	
	
		

	
	
		

	
	
		
		
		
		

	
	
		

	
	
		

	
	
		
		
		
		

	
	
		

	
	
		

	
	
		
		
		
		

	
	
		

	
	
		

	
	
		
		
		
		

	
	
		

	
	
		

	
	
		
		
		
		

	
	
		
		
		
		

	
	
		

	
	
		

	
	
		

	
	
		

	
	
		
		
		
		

	
	
		

	
	
		

	
	
		
		
		
		

	
	
		

	
	
		

	
	
		
		
		
		

	
	
		

	
	
		

	
	
		

	
	
		
		
		

	
	
		

	
	
		
		
		

	
	
		

	
	
		
		
		
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		
		

	
	
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		
		

	
	
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		
		

	
	
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		

	
	
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		

	
	
		
		
		
		

	
	
		

	
	
		

	
	
		
		

	
	
		
		
		
<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Graphs: List Representation on CC 315 Textbook</title>
    <link>https://ksu-cs-textbooks.github.io/cc315/iii-graphs/7-graphs-list-representation/</link>
    <description>Recent content in Graphs: List Representation on CC 315 Textbook</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 17 Aug 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://ksu-cs-textbooks.github.io/cc315/iii-graphs/7-graphs-list-representation/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Introduction</title>
      <link>https://ksu-cs-textbooks.github.io/cc315/iii-graphs/7-graphs-list-representation/1-introduction/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cc315/iii-graphs/7-graphs-list-representation/1-introduction/</guid>
      <description>In the previous module, we introduced graphs and a matrix-based implementation. For this module, we will continue working with graphs and change our implementation to lists.
Why Another Implementation? When using graphs, a lot of situational variation can occur. Some graphs can have a few nodes with many edges, many nodes with few edges, and so on. When we use the matrix implementation, we initialize a matrix with the number of columns and rows equal to the number of nodes.</description>
    </item>
    <item>
      <title>List Representation</title>
      <link>https://ksu-cs-textbooks.github.io/cc315/iii-graphs/7-graphs-list-representation/2-list-representation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cc315/iii-graphs/7-graphs-list-representation/2-list-representation/</guid>
      <description>In the matrix representation, we had an array of the node items. In the list representation, we will have an array of node objects. Each node object will keep track of the node item, the node index, and the outgoing edges.
The item can be any object and the index will be a value within our capacity. The edges will be a list of pairs where the first entry is the index of the target node and the second entry is the weight of the edge.</description>
    </item>
    <item>
      <title>Dense VS Sparse</title>
      <link>https://ksu-cs-textbooks.github.io/cc315/iii-graphs/7-graphs-list-representation/3-dense-vs-sparse/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cc315/iii-graphs/7-graphs-list-representation/3-dense-vs-sparse/</guid>
      <description>When considering which implementation to use, we need to consider the connectivity in our graph. The terms that we use to describe the connectedness are dense and sparse.
Dense Graph: A dense graph is a graph in which there is a large number of edges. Typically in a dense graph, the number of edges is close to the maximum number of edges. Sparse Graph: A sparse graph is a graph in which there is a small number of edges.</description>
    </item>
    <item>
      <title>UML - Graph Node</title>
      <link>https://ksu-cs-textbooks.github.io/cc315/iii-graphs/7-graphs-list-representation/4-uml-graph-node/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cc315/iii-graphs/7-graphs-list-representation/4-uml-graph-node/</guid>
      <description>In this representation, we will have an array of graph node objects. We will first cover the UML for the graph node objects and then discuss the graph functions and attributes.
Attributes item: the value that the node contains. index: the index of the node. edges: ordered pairs (e, w) where this node is the source, e is the target node index, and w is the weight of the edge as a double.</description>
    </item>
    <item>
      <title>UML - Graph</title>
      <link>https://ksu-cs-textbooks.github.io/cc315/iii-graphs/7-graphs-list-representation/5-uml-graph/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cc315/iii-graphs/7-graphs-list-representation/5-uml-graph/</guid>
      <description>Attributes nodes: This will keep track of the nodes which are in our graph as well as the node values. The nodes can have any type of value such as numbers, characters, and even other data structures. size: This will keep track of the number of nodes that are active in our graph. Upon initialization, we will initialize nodes to be an empty array with dimension capacity and size to be zero as we start with no actual nodes.</description>
    </item>
    <item>
      <title>Node and Edge Functions</title>
      <link>https://ksu-cs-textbooks.github.io/cc315/iii-graphs/7-graphs-list-representation/6-node-and-edge-functions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cc315/iii-graphs/7-graphs-list-representation/6-node-and-edge-functions/</guid>
      <description>add node: will add a node to the graph with the given value if our graph still has room. Finding a location for the node will be the same procedure as the matrix graph. If we find an open spot to add the node, we will instantiate a new graph node and insert it into the nodes attribute. function ADDNODE(VALUE) IDX = -1 for NODE in NODES if NODE is VALUE return NODE&amp;#39;s index if NODE has no entry and IDX is -1 IDX = NODE&amp;#39;s index if IDX is not -1 NEWNODE = graph node with VALUE and IDX for input add NEWNODE to NODES at position IDX increment SIZE return IDX remove node: will remove a node to the graph with the given value if our graph has the node.</description>
    </item>
    <item>
      <title>Summary</title>
      <link>https://ksu-cs-textbooks.github.io/cc315/iii-graphs/7-graphs-list-representation/7-summary/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ksu-cs-textbooks.github.io/cc315/iii-graphs/7-graphs-list-representation/7-summary/</guid>
      <description>In this module, we introduced a new way to store the graph data structure. Thus, we now have two ways to work with graphs, in lists and in matrices:
List Representation Matrix Representation While these methods show the same information, there are cases when one way may be more desirable than the other.
We discussed how a sparse graph is better suited for a list representation and a dense graph is better suited for a matrix representation.</description>
    </item>
  </channel>
</rss>