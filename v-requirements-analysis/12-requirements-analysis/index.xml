




  
	
	  

  
	
	  

  
	
	  

  
	
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
		
		
		
	  

  
	
	  

  
	
	  

  
	
	  

  
	
	  

  
	
		
		
		
	  

  
	
	  

  
	
	  

  
	
		
		
		
	  

  
	
		
	  

  
	
	  

  
	
	  

  
	
		
		
		
	  

  
	
	  

  
	
	  

  
	
		
		
		
	  

  
	
	  

  
	
	  

  
	
		
		
		
		
		
	  

  
	
	  

  
	
	  

  
	
	  

  
	
	  

  
	
		
		
		
	  

  
	
	  

  
	
	  

  
	
		
		
		
	  

  
	
	  

  
	
	  

  
	
		
		
		
	  

  
	
	  

  
	
	  

  
	
	  

  
	
		
		
	  

  
	
	  

  
	
		
		
	  

  
	
	  

  
	
		
		
		
		
	  

  
	
		
		
	  

  
	
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
		
	  

  
	
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
		
	  

  
	
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
		
		
	  

  
	
	  

  
	
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
		
	  

  
	
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
		
	  

  
	
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
		
	  

  
	
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
		
		
	  

  
	
	  

  
	
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
		
		
	  

  
	
	  

  
	
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
		
	  

  
	
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
		
		
	  

  
	
	  

  
	
	  

  
	
		
	  

  
	
		
		
		
<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Requirements Analysis :: CC 315 Textbook</title>
    <link>https://textbooks.cs.ksu.edu/cc315/v-requirements-analysis/12-requirements-analysis/</link>
    <description>Welcome! This page is the main page for Requirements Analysis</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 27 Jun 2024 16:12:13 -0500</lastBuildDate>
    <atom:link href="https://textbooks.cs.ksu.edu/cc315/v-requirements-analysis/12-requirements-analysis/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Module Outline</title>
      <link>https://textbooks.cs.ksu.edu/cc315/v-requirements-analysis/12-requirements-analysis/1-module-outline/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://textbooks.cs.ksu.edu/cc315/v-requirements-analysis/12-requirements-analysis/1-module-outline/</guid>
      <description>In this module, we will discuss how we can determine which data structure we should choose when storing real-world data. We’ll typically make this decision based on the characteristics of the data we would like to store. In general, the data structures we’ve learned often work together well and complement each other, as we saw in Dijkstra’s algorithm. In some cases, one structure can be utilized to implement another, such as using a linked list to implement a stack or a queue.</description>
    </item>
    <item>
      <title>Types of Data</title>
      <link>https://textbooks.cs.ksu.edu/cc315/v-requirements-analysis/12-requirements-analysis/2-types-of-data/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://textbooks.cs.ksu.edu/cc315/v-requirements-analysis/12-requirements-analysis/2-types-of-data/</guid>
      <description>The first step toward determining which data structure to use relies heavily on the format of the data. By looking at the data and trying to understand what it contains and how it works, we can get a better idea of what data structure would work best to represent the data. Here, we will discuss some main types of data that we could encounter.&#xA;Unique Unique data is the type of data where each element in a group must be unique - there can be no duplicates.</description>
    </item>
    <item>
      <title>Trees</title>
      <link>https://textbooks.cs.ksu.edu/cc315/v-requirements-analysis/12-requirements-analysis/3-trees/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://textbooks.cs.ksu.edu/cc315/v-requirements-analysis/12-requirements-analysis/3-trees/</guid>
      <description>In general, trees are good for hierarchical data. While trees can be used for linear data, it is inefficient to implement them in that way (from a certain point of view, a linked list is simply a tree where each node can only have one child). When data points have many predecessors, trees cannot be used. Thus, trees are not suitable for most relational data.&#xA;Trees To recap, we defined a tree as having the following structure:</description>
    </item>
    <item>
      <title>Graphs</title>
      <link>https://textbooks.cs.ksu.edu/cc315/v-requirements-analysis/12-requirements-analysis/4-graphs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://textbooks.cs.ksu.edu/cc315/v-requirements-analysis/12-requirements-analysis/4-graphs/</guid>
      <description>Graphs are a good data structure for relational data. This would include data in which elements can have some sort of similarity or distance defined between those elements. This measure of similarity between elements can be defined as realistically or abstractly as needed for the data set. The distance can be as simple as listing neighbors or adjacent elements.&#xA;Graphs Graphs are multidimensional data structures that can represent many different types of data using nodes and edges.</description>
    </item>
    <item>
      <title>Priority Queues</title>
      <link>https://textbooks.cs.ksu.edu/cc315/v-requirements-analysis/12-requirements-analysis/5-priority-queues/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://textbooks.cs.ksu.edu/cc315/v-requirements-analysis/12-requirements-analysis/5-priority-queues/</guid>
      <description>The last structure we covered were priority queues. On their own, these are good for hierarchical data. We discussed using priority queues for ticketing systems where the priority is the cost or urgency. In the project, we utilized priority queues in conjunction with Dijkstra’s algorithm.&#xA;Priority Queues A priority queue is a data structure which contains elements and each element has an associated priority value. The priority for an element corresponds to its importance.</description>
    </item>
    <item>
      <title>Examples</title>
      <link>https://textbooks.cs.ksu.edu/cc315/v-requirements-analysis/12-requirements-analysis/6-examples/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://textbooks.cs.ksu.edu/cc315/v-requirements-analysis/12-requirements-analysis/6-examples/</guid>
      <description>In real world applications, it won’t always be a straightforward choice to use one structure over another. Users may come to us with unclear ideas of what they are looking for and we will need to be able to infer what structure is best suited for their needs based on what we can learn from them. Typically, those describing applications to us may not be familiar with the nomenclature we use as programmers.</description>
    </item>
  </channel>
</rss>